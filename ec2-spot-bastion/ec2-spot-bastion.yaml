AWSTemplateFormatVersion: 2010-09-09
Description: >
  EC2 Spot bastion host / worker instance. The Auto Scaling group
  is created for health/recovery purposes and for allocating the
  Spot instance in the cheaper Availability Zone.

##
# Metadata and organisation
#
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Server settings ..."
        Parameters:
          - AMIid
          - InstanceType
          - Keypair
          - TheHostname
      -
        Label:
          default: "Networking ..."
        Parameters:
          - VPC
          - Subnet
          - SourceIP

##
# Template parameter's
#
Parameters:

  Subnet:
    Description: The EC2 Instance will be launched in this subnet.
    Type: 'List<AWS::EC2::Subnet::Id>'

  VPC:
    Description: The EC2 Instance will be launched in this VPC.
    Type: AWS::EC2::VPC::Id

  AMIid:
    Description: The EC2 Instance will use this AMI.
    Type: AWS::EC2::Image::Id

  Keypair:
    Description: SSH Key pair.
    Type: AWS::EC2::KeyPair::KeyName

  InstanceType:
    Description: EC2 Instance type.
    Type: String
    Default: t3.large

  SourceIP:
    Description: Source IP, for locking incoming SSH connections.
    Type: String
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
    Default: '0.0.0.0/0'

  TheHostname:
    Description: The hostname for the bastion server.
    Type: String
    Default: 'the-bastion-host'

Resources:

  ###
  # ASG Bastion fleet
  ##
  ASGSpotFlet:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      AutoScalingCreationPolicy:
        MinSuccessfulInstancesPercent: 100
      ResourceSignal:
        Count: 1
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 0
        MinSuccessfulInstancesPercent: 100
        PauseTime: PT10M
        WaitOnResourceSignals: true
    Metadata:
      Comment: "Spot Bastion host"
      AWS::CloudFormation::Init:
        config:
            files:
                "/etc/cfn/cfn-hup.conf":
                  content: !Sub |
                    [main]
                    stack=${AWS::StackId}
                    region=${AWS::Region}
                    interval=3
                  mode: "000400"
                  owner: "root"
                  group: "root"

                "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
                  content: !Sub |
                    [cfn-auto-reloader-hook]
                    triggers=post.update
                    path=Resources.MyVMInstance.Metadata.AWS::CloudFormation::Init
                    action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ASGSpotFlet --region ${AWS::Region}
                  mode: "000400"
                  owner: "root"
                  group: "root"
    Properties:
      MixedInstancesPolicy:
        InstancesDistribution:
          # Configuring here for 'Full Spot Fleet'
          OnDemandAllocationStrategy: prioritized
          OnDemandBaseCapacity: 0
          OnDemandPercentageAboveBaseCapacity: 0
          SpotAllocationStrategy: lowest-price
          # SpotInstancePools: Integer
          # SpotMaxPrice: String
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref ASGSpotFletLT
            Version: !GetAtt ASGSpotFletLT.LatestVersionNumber
      MinSize: '1'
      MaxSize: '1'
      DesiredCapacity: '1'
      # AZs -> choose either 'VPCZoneIdentifier' or 'AvailabilityZones'
      VPCZoneIdentifier: !Ref Subnet
      #AvailabilityZones:
      #  Fn::GetAZs: ""
      Tags:
        -
          Key: "Name"
          Value: !Ref TheHostname
          PropagateAtLaunch: true

  ###
  # ASG Spot fleet Launch Template
  ##
  ASGSpotFletLT:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref AMIid
        InstanceType: !Ref InstanceType
        KeyName: !Ref Keypair
        SecurityGroupIds: [ !Ref ASGSpotFletSG ]
        IamInstanceProfile:
          Name: !Ref BastionInstanceProfile
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: 25
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash -xe

              # Update && upgrade
              apt-get update && DEBIAN_FRONTEND=noninteractive \
                                apt-get -y \
                                -o Dpkg::Options::="--force-confdef" \
                                -o Dpkg::Options::="--force-confold" \
                                upgrade

              ## CFN Initialization ##

              # Install scripts
              apt-get -y install python-pip
              pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz awscli

              # Start cfn-init to Install all Metadata content (packages, sources, files, commands and services )
              /usr/local/bin/cfn-init -s ${AWS::StackId} -r ASGSpotFlet --region ${AWS::Region} || error_exit 'Failed to run cfn-init'

              # Start cfn-hup daemon so that it will keep listening to any changes to EC2 Instance Metadata.
              /usr/local/bin/cfn-hup || error_exit 'Failed to start cfn-hup'

              # Install and setup the instance ##
              apt-get install -y  linux-headers-$(uname -r) \
                                  htop \
                                  unzip \
                                  docker.io \
                                  docker-compose \
                                  git \
                                  gcc \
                                  curl \
                                  telnet \
                                  nmap

              # Change hostname
              hostname ${TheHostname}
              echo ${TheHostname} > /etc/hostname

              # Associate the EIP
              sleep 15
              INSTANCE_ID=$(curl --silent http://169.254.169.254/latest/meta-data/instance-id)
              aws --region ${AWS::Region} ec2 associate-address --instance-id "$INSTANCE_ID" --allocation-id ${BastionEIP.AllocationId}

              # Set SSH timeout to 4 hours
              sed -i "/ClientAliveInterval/c\ClientAliveInterval 60m" /etc/ssh/sshd_config
              sed -i "/ClientAliveCountMax/c\ClientAliveInterval 4" /etc/ssh/sshd_config
              systemctl restart sshd

              # As a last step, signal the stack...
              /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource ASGSpotFlet --region ${AWS::Region}

  ###
  # ASG Spot fleet SG
  ##
  ASGSpotFletSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allowed Ports
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SourceIP

  ###
  # EIP
  ##
  BastionEIP:
    Type: AWS::EC2::EIP

  ###
  # IAM / Security configuration
  ##
  BastionInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: BastionInstanceRole
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Sid: EIPAllocation
            Effect: Allow
            Action:
            - ec2:AssociateAddress
            - ec2:DisassociateAddress
            Resource: '*'
          # - Sid: S3Access
          #   Effect: Allow
          #   Action:
          #   - s3:Get*
          #   - s3:List*
          #   - s3:Head*
          #   Resource: '*'

  BastionInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref BastionInstanceRole


###
# Outputs
##
Outputs:
  BastionEIPAddress:
    Description: The IP address of the Bastion Host.
    Value: !Ref BastionEIP
