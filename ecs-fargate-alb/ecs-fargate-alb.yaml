AWSTemplateFormatVersion: '2010-09-09'
Description: ECS Fargate service with Application Load Balancer

Parameters:

  ClusterName:
    Type: String
    Default: Testing
    Description: ECS cluster name

  TheVPCID:
    Type: AWS::EC2::VPC::Id
    Description: The VPC

  TheSubnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: List of subnets

  ImageUrl:
    Type: String
    Default: nginx
    Description: The url of a docker image that contains the application process that will handle the traffic for this service

  ContainerPort:
    Type: Number
    Default: 80
    Description: What port number the application inside the docker container is binding to

  DesiredCount:
    Type: Number
    Default: 2
    Description: How many copies of the service task to run

Resources:

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${ClusterName}
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - Base: 0
          CapacityProvider: FARGATE
          Weight: 1

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-service
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: !Sub ${AWS::StackName}-service
          Cpu: 256
          Memory: 512
          Image: !Ref 'ImageUrl'
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'

  Service:
    Type: AWS::ECS::Service
    DependsOn: TheListener
    Properties:
      ServiceName: !Sub ${AWS::StackName}-service
      Cluster: !Ref ECSCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: [!Ref SecurityGroup]
          Subnets: !Ref TheSubnets
      TaskDefinition: !Ref 'TaskDefinition'
      HealthCheckGracePeriodSeconds: 120
      LoadBalancers:
        - ContainerName: !Sub ${AWS::StackName}-service
          ContainerPort: !Ref 'ContainerPort'
          TargetGroupArn: !Ref 'TargetGroup'

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allowed Ports
      VpcId: !Ref TheVPCID
      SecurityGroupIngress:
        - IpProtocol: '-1'
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          CidrIp: '0.0.0.0/0'

  TheBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Sub ${AWS::StackName}-alb
      Scheme: internet-facing
      Subnets: !Ref TheSubnets
      Type: application
      SecurityGroups: [!Ref SecurityGroup]

  TheListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref TheBalancer
      Port: 80
      Protocol: HTTP

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      TargetType: ip
      Name: !Sub ${AWS::StackName}-target-grpup
      Port: !Ref 'ContainerPort'
      Protocol: HTTP
      VpcId: !Ref TheVPCID

  ###
  ## Scaling
  StepScalingPolicyAvgCPU:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-target-tracking
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref TestingServiceAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        DisableScaleIn: False
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 300
        ScaleOutCooldown: 60
        TargetValue: 50

  TestingServiceAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: Service
    Properties:
      MaxCapacity: 5
      MinCapacity: 1
      ResourceId: !Sub service/${ECSCluster}/${AWS::StackName}-service
      RoleARN: !GetAtt ScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-scaling-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - application-autoscaling.amazonaws.com
              - ecs.application-autoscaling.amazonaws.com
            Action:
              - sts:AssumeRole

  ScalingRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
      - !Ref ScalingRole
      PolicyName: !Sub ${AWS::StackName}-scaling-policy
      PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - application-autoscaling:*
                - ecs:RunTask
                - ecs:UpdateSerice
                - ecs:DescribeServices
                - cloudwatch:PutMetricAlarm
                - cloudwatch:DescribeAlarms
                - cloudwatch:GetMetricStatistics
                - cloudwatch:SetAlarmState
                - cloudwatch:DeleteAlarms
              Resource: '*'
