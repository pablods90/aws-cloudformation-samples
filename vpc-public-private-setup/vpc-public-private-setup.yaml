AWSTemplateFormatVersion: '2010-09-09'
Description: VPC setup with public and private schema.


Parameters:
  ResourcesPrefixName:
    Description: Prefix name for all the auto generated resources
    Type: String
    Default: auto-networking
  RetentionInDays:
    Description: Specifies the number of days you want to retain log events.
    Type: Number
    Default: 14
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653
  TrafficType:
    Description: The type of traffic to log.
    Type: String
    Default: REJECT
    AllowedValues:
      - ACCEPT
      - REJECT
      - ALL


Resources:
  PubPrivateVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.53.4.0/22
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${ResourcesPrefixName}-vpc

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: PubPrivateVPC
      AvailabilityZone:
        'Fn::Select':
          - 0
          - 'Fn::GetAZs': ''
      CidrBlock: 10.53.7.0/26
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ResourcesPrefixName}-public-subnet-A

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        'Fn::Select':
          - 1
          - 'Fn::GetAZs': ''
      VpcId:
        Ref: PubPrivateVPC
      CidrBlock: 10.53.7.64/26
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ResourcesPrefixName}-public-subnet-B

  PublicSubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        'Fn::Select':
          - 2
          - 'Fn::GetAZs': ''
      VpcId:
        Ref: PubPrivateVPC
      CidrBlock: 10.53.7.128/26
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ResourcesPrefixName}-public-subnet-C

  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: PubPrivateVPC
      AvailabilityZone:
        'Fn::Select':
          - 0
          - 'Fn::GetAZs': ''
      CidrBlock: 10.53.4.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${ResourcesPrefixName}-private-subnet-A

  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: PubPrivateVPC
      AvailabilityZone:
        'Fn::Select':
          - 1
          - 'Fn::GetAZs': ''
      CidrBlock: 10.53.5.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${ResourcesPrefixName}-private-subnet-B

  PrivateSubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: PubPrivateVPC
      AvailabilityZone:
        'Fn::Select':
          - 2
          - 'Fn::GetAZs': ''
      CidrBlock: 10.53.6.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${ResourcesPrefixName}-private-subnet-C

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ResourcesPrefixName}-igw

  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId:
        Ref: PubPrivateVPC
      InternetGatewayId:
        Ref: InternetGateway

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId:
        Ref: PubPrivateVPC
      Tags:
        - Key: Name
          Value: !Sub ${ResourcesPrefixName}-PublicRouteTable

  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicRouteTable

  PublicSubnet3RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId:
        Ref: PublicSubnet3
      RouteTableId:
        Ref: PublicRouteTable

  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId:
        'Fn::GetAtt':
          - NatPublicIP
          - AllocationId
      SubnetId:
        Ref: PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${ResourcesPrefixName}-NatGateway

  NatPublicIP:
    Type: 'AWS::EC2::EIP'
    DependsOn: PubPrivateVPC
    Properties:
      Domain: vpc

  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId:
        Ref: PubPrivateVPC
      Tags:
        - Key: Name
          Value: !Sub ${ResourcesPrefixName}-PrivateRouteTable

  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      RouteTableId:
        Ref: PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      RouteTableId:
        Ref: PrivateRouteTable

  PrivateSubnet3RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId:
        Ref: PrivateSubnet3
      RouteTableId:
        Ref: PrivateRouteTable

  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub /vpcflowlogs/${ResourcesPrefixName}
      RetentionInDays:
        Ref: RetentionInDays

  Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: flowlogs-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                Resource:
                  'Fn::GetAtt':
                    - LogGroup
                    - Arn

  FlowLog:
    Type: 'AWS::EC2::FlowLog'
    Properties:
      DeliverLogsPermissionArn:
        'Fn::GetAtt':
          - Role
          - Arn
      LogGroupName:
        Ref: LogGroup
      ResourceId:
        Ref: PubPrivateVPC
      ResourceType: VPC
      TrafficType:
        Ref: TrafficType

Outputs:

  PubPrivateVPCID:
    Description: VPC ID
    Value:
      Ref: PubPrivateVPC
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-VPCId'

  PrivateSubnet1ID:
    Description: Private Subnet A ID
    Value:
      Ref: PrivateSubnet1
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-privateSubnetID1'

  PrivateSubnet2ID:
    Description: Private Subnet B ID
    Value:
      Ref: PrivateSubnet2
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-privateSubnetID2'

  PrivateSubnet3ID:
    Description: Private Subnet B ID
    Value:
      Ref: PrivateSubnet3
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-privateSubnetID3'

  PublicSubnet1ID:
    Description: Public Subnet A ID
    Value:
      Ref: PublicSubnet1
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-publicSubnetID1'

  PublicSubnet2ID:
    Description: Public Subnet B ID
    Value:
      Ref: PublicSubnet2
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-publicSubnetID2'

  PublicSubnet3ID:
    Description: Public Subnet B ID
    Value:
      Ref: PublicSubnet3
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-publicSubnetID3'

  LogGroupARN:
    Description: >-
      The name of the CloudWatch Logs log group where the
      flow logs will be published.
    Value:
      'Fn::GetAtt':
        - LogGroup
        - Arn
